.container-fluid.container-fixed-lg
  .panel.panel-default
    .panel-heading
      %h2
        Evaluación de programas
      .row
        .col-md-12
          %p
            %strong
              Programa a evaluar:
            = @program.name
          %p
            %strong
              Alumno en evaluación:
            = @user.name
    .panel-body
      %table.table.table-striped
        %thead
          %tr
            %th
              Módulo
            %th.text-center{:width => "21%"}
              Preguntas de módulo
            %th.text-center{:width => "20%"}
              Rúbricas evaluadas
            %th.text-center{:width => "20%"}
              Puntajes de módulo
            %th{:width => "15%"}
        %tbody
          - answers_total, rubrics_checked = 0, 0
          - @chapters.each do |chapter|
            %tr
              - result = evaluation_result(chapter)
              %td
                = chapter.name
              %td
                - if chapter.questions.count > 0
                  - answered_percentage = answered_questions(chapter, @user) * (100 / chapter.questions.count.to_f).ceil
                  .p-r-10
                    .progress.m-b-10.m-l-20.m-r-10
                      .progress-bar{:style => "width: #{answered_percentage}%", :class => "#{(answered_percentage > 95) ? 'progress-bar-success' : 'progress-bar-warning'}"}
                  .text-center
                    = answered_questions(chapter, @user)
                    %span de
                    = chapter.questions.count
                    %span preguntas
                  - answers_total += answered_questions(chapter, @user)
                - else
                  .text-center Módulo sin preguntas
              %td
                - if chapter.questions.count == 0
                  .text-center Módulo sin preguntas
                - elsif chapter.evaluations.exists?
                  - total, counter = chapter.evaluations.count, 0
                  - chapter.evaluations.each do |evaluation|
                    - evaluation_checked?(@user, evaluation) ? (counter += 1; rubrics_checked += 1) : counter += 0
                  .p-r-10
                    .progress.m-b-10.m-l-20.m-r-10
                      .progress-bar{:style => "width: #{((counter.to_f/total.to_f)*100).ceil}%", :class => "#{((counter/total) == 1) ? 'progress-bar-success' : 'progress-bar-warning'}"}
                  .text-center
                    = counter 
                    %span de
                    = total
                    %span rúbricas
                - else
                  .text-center.text-danger No hay rúbrica
              %td.p-b-15
                - if chapter.questions.count == 0
                  .text-center Módulo sin preguntas
                - elsif !chapter.evaluations.exists?
                  .text-center.text-danger No hay rúbrica
                - elsif chapter.points == 0
                  .text-center No hay puntaje
                - else
                  .p-r-10
                    .progress.m-b-10.m-l-20.m-r-10
                      .progress-bar.progress-bar-complete{:style => "width: #{result * (100 / chapter.points)}%"}
                  .text-center
                    = result
                    %span /
                    = chapter.points
                    %span pts
              %td.text-center
                = link_to mentor_evaluation_path(chapter, user_id: @user, program_id: @program) do
                  - if current_user.mentor?
                    .fa.fa-edit
                    Evaluar módulo
                  - else
                    .fa.fa-eye
                    Ver evaluación
          %tr
            %th
              Total
            %th.text-center
              = answers_total
              %span de
              = total_qustions(@chapters)
              %span preguntas
            %th.text-center
              #{rubrics_checked} de
              #{@chapters.map { |chapter| chapter.evaluations.count }.inject(0, :+) } rubricas
            %th.text-center
              #{@chapters.map { |chapter| evaluation_result(chapter) }.inject(0, :+) } /
              #{@chapters.sum(:points)} pts
            %th